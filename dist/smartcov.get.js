"use strict";
/// <reference path="./typings/main.d.ts" />
var plugins = require("./smartcov.plugins");
exports.percentage = function (filePathArg, format) {
    var done = plugins.Q.defer();
    var report;
    var covParseActive = true;
    try {
        report = plugins.fs.readFileSync(filePathArg, 'utf8');
    }
    catch (err) {
        plugins.beautylog.warn("no file found at " + filePathArg.blue);
        covParseActive = false;
        done.resolve(0);
    }
    if (covParseActive && report === "")
        covParseActive = false;
    if (covParseActive) {
        var coveragePercentage_1;
        var coveragePercentageRounded_1;
        format = format || 'jscoverage';
        switch (format) {
            case 'lcov':
            default:
                plugins.lcovParse(report, function (err, data) {
                    if (err) {
                        console.log(err);
                    }
                    ;
                    var hit = 0;
                    var found = 0;
                    for (var i = 0; i < data.length; i++) {
                        hit += data[i].lines.hit;
                        found += data[i].lines.found;
                    }
                    coveragePercentage_1 = (hit / found) * 100;
                    coveragePercentageRounded_1 = plugins.mathjs.round(coveragePercentage_1);
                    done.resolve(coveragePercentageRounded_1);
                });
                break;
        }
    }
    return done.promise;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNtYXJ0Y292LmdldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsNENBQTRDO0FBQzVDLElBQU8sT0FBTyxXQUFXLG9CQUFvQixDQUFDLENBQUM7QUFDcEMsa0JBQVUsR0FBRyxVQUFTLFdBQWtCLEVBQUUsTUFBYztJQUMvRCxJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQzdCLElBQUksTUFBYSxDQUFDO0lBQ2xCLElBQUksY0FBYyxHQUFXLElBQUksQ0FBQztJQUNsQyxJQUFJLENBQUM7UUFDRCxNQUFNLEdBQUcsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzFELENBQ0E7SUFBQSxLQUFLLENBQUEsQ0FBQyxHQUFHLENBQUMsQ0FBQSxDQUFDO1FBQ1AsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQy9ELGNBQWMsR0FBRyxLQUFLLENBQUM7UUFDdkIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNwQixDQUFDO0lBRUQsRUFBRSxDQUFBLENBQUMsY0FBYyxJQUFJLE1BQU0sS0FBSyxFQUFFLENBQUM7UUFBQyxjQUFjLEdBQUcsS0FBSyxDQUFDO0lBRTNELEVBQUUsQ0FBQSxDQUFDLGNBQWMsQ0FBQyxDQUFBLENBQUM7UUFDZixJQUFJLG9CQUF5QixDQUFDO1FBQzlCLElBQUksMkJBQWdDLENBQUM7UUFDckMsTUFBTSxHQUFHLE1BQU0sSUFBSSxZQUFZLENBQUM7UUFDaEMsTUFBTSxDQUFBLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUNaLEtBQUssTUFBTSxDQUFDO1lBQ1o7Z0JBQ0ksT0FBTyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsVUFBUyxHQUFHLEVBQUUsSUFBSTtvQkFDeEMsRUFBRSxDQUFBLENBQUMsR0FBRyxDQUFDLENBQUEsQ0FBQzt3QkFDSixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO29CQUNyQixDQUFDO29CQUFBLENBQUM7b0JBQ0YsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDO29CQUNaLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztvQkFDZCxHQUFHLENBQUEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQzt3QkFDbEMsR0FBRyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDO3dCQUN6QixLQUFLLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7b0JBQ2pDLENBQUM7b0JBQ0Qsb0JBQWtCLEdBQUcsQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDO29CQUN6QywyQkFBeUIsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxvQkFBa0IsQ0FBQyxDQUFDO29CQUNyRSxJQUFJLENBQUMsT0FBTyxDQUFDLDJCQUF5QixDQUFDLENBQUM7Z0JBQzVDLENBQUMsQ0FBQyxDQUFDO2dCQUNILEtBQUssQ0FBQztRQUNkLENBQUM7SUFDTCxDQUFDO0lBRUQsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7QUFDeEIsQ0FBQyxDQUFDIiwiZmlsZSI6InNtYXJ0Y292LmdldC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL3R5cGluZ3MvbWFpbi5kLnRzXCIgLz5cbmltcG9ydCBwbHVnaW5zID0gcmVxdWlyZShcIi4vc21hcnRjb3YucGx1Z2luc1wiKTtcbmV4cG9ydCBsZXQgcGVyY2VudGFnZSA9IGZ1bmN0aW9uKGZpbGVQYXRoQXJnOnN0cmluZywgZm9ybWF0PzpzdHJpbmcpOm51bWJlciB7XG4gICAgbGV0IGRvbmUgPSBwbHVnaW5zLlEuZGVmZXIoKTtcbiAgICBsZXQgcmVwb3J0OlN0cmluZztcbiAgICBsZXQgY292UGFyc2VBY3RpdmU6Ym9vbGVhbiA9IHRydWU7XG4gICAgdHJ5IHtcbiAgICAgICAgcmVwb3J0ID0gcGx1Z2lucy5mcy5yZWFkRmlsZVN5bmMoZmlsZVBhdGhBcmcsICd1dGY4Jyk7XG4gICAgfVxuICAgIGNhdGNoKGVycil7XG4gICAgICAgIHBsdWdpbnMuYmVhdXR5bG9nLndhcm4oXCJubyBmaWxlIGZvdW5kIGF0IFwiICsgZmlsZVBhdGhBcmcuYmx1ZSk7XG4gICAgICAgIGNvdlBhcnNlQWN0aXZlID0gZmFsc2U7XG4gICAgICAgIGRvbmUucmVzb2x2ZSgwKTtcbiAgICB9XG5cbiAgICBpZihjb3ZQYXJzZUFjdGl2ZSAmJiByZXBvcnQgPT09IFwiXCIpIGNvdlBhcnNlQWN0aXZlID0gZmFsc2U7XG5cbiAgICBpZihjb3ZQYXJzZUFjdGl2ZSl7XG4gICAgICAgIGxldCBjb3ZlcmFnZVBlcmNlbnRhZ2U6bnVtYmVyO1xuICAgICAgICBsZXQgY292ZXJhZ2VQZXJjZW50YWdlUm91bmRlZDpudW1iZXI7XG4gICAgICAgIGZvcm1hdCA9IGZvcm1hdCB8fCAnanNjb3ZlcmFnZSc7XG4gICAgICAgIHN3aXRjaChmb3JtYXQpIHtcbiAgICAgICAgICAgIGNhc2UgJ2xjb3YnOlxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBwbHVnaW5zLmxjb3ZQYXJzZShyZXBvcnQsIGZ1bmN0aW9uKGVyciwgZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBpZihlcnIpe1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhpdCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHZhciBmb3VuZCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoaXQgKz0gZGF0YVtpXS5saW5lcy5oaXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3VuZCArPSBkYXRhW2ldLmxpbmVzLmZvdW5kO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvdmVyYWdlUGVyY2VudGFnZSA9IChoaXQgLyBmb3VuZCkgKiAxMDA7XG4gICAgICAgICAgICAgICAgICAgIGNvdmVyYWdlUGVyY2VudGFnZVJvdW5kZWQgPSBwbHVnaW5zLm1hdGhqcy5yb3VuZChjb3ZlcmFnZVBlcmNlbnRhZ2UpO1xuICAgICAgICAgICAgICAgICAgICBkb25lLnJlc29sdmUoY292ZXJhZ2VQZXJjZW50YWdlUm91bmRlZCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZG9uZS5wcm9taXNlO1xufTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
